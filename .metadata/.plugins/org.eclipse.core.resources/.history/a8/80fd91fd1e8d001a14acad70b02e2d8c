package ontology;

import jade.content.onto.*;
import jade.content.schema.*;

public class BookTradingOntology {
	
	public static final String ONTOLOGY_NAME = "Book-trading-ontology";
	private static final long serialVersionUID = 1L;
	private static Ontology theInstance = new BookTradingOntology();
	
	//VOCABULARY
	public static String BOOK = "Book";
	public static String BOOK_TITLE = "title";
	public static String BOOK_AUTHORS = "authors";
	public static String BOOK_EDITR = "editor";
	
	public static String COSTS = "Costs";
	public static String COSTS_ITEM = "item";
	public static String COSTS_PRICE = "price";
	
	public static final String SELL = "Sell";
	public static final String SELL_ITEM = "item";
	
	
	
	static Ontology getInstance() {
		return theInstance;
	}
	
	public BookTradingOntology() {
		// The Book-trading ontology extends the basic ontology
		super(ONTOLOGY_NAME, BasicOntology.getInstance());
		try {
			add(new ConceptSchema(BOOK), Book.class);
			add(new PredicateSchema(COSTS), Costs.class);
			add(new AgentActionSchema(SELL), Sell.class);
			
			// Structure of the schema for the Book concept
			ConceptSchema cs = (ConceptSchema) getSchema(ITEM);
			cs.add(BOOK_TITLE, (PrimitiveSchema)
					getSchema(BasicOntology.STRING));
			cs.add(BOOK_AUTHORS, (PrimitiveSchema)
					getSchema(BasicOntology.STRING), 0,
					ObjectSchema.UNLIMITED);
			cs.add(BOOK_EDITOR, (PrimitiveSchema)
					getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
			// Structure of the schema for the Costs predicate
			
			// Structure of the schema for the Sell agent action
			AgentActionSchema as = (AgentActionSchema) getSchema(SELL);
			as.add(SELL_ITEM, (ConceptSchema) getSchema(BOOK));

		} 
		catch(OntologyException oe) {
			oe.printStackTrace();
		}
	}
		
}
