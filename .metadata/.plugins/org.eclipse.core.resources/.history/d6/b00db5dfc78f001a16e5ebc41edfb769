package ua.agentlab;

import jade.content.ContentElementList;   
import jade.content.ContentManager;   
import jade.content.lang.Codec;   
import jade.content.lang.Codec.CodecException;   
import jade.content.lang.sl.SLCodec;   
import jade.content.onto.Ontology;   
import jade.content.onto.OntologyException;   
import jade.content.onto.basic.Action;   
import jade.core.Agent;   
import jade.core.AID;   
import jade.core.behaviours.*;   
import jade.lang.acl.*;   
import jade.proto.ContractNetInitiator;   
import jade.domain.*;   
import jade.domain.FIPAAgentManagement.*;   
import jade.util.leap.ArrayList;   
   
import java.util.Vector;   
import java.util.Date;   
   
import ontology.*;   
   
public class BookBuyerAgent extends Agent {   
    // The list of known seller agents   
    private Vector<AID> sellerAgents = new Vector<AID>();   
       
    private Codec codec = new SLCodec();   
    private Ontology ontology = BookTradingOntology.getInstance();   
       
    /**  
    * Agent initializations  
    */   
    protected void setup() {   
        getContentManager().registerLanguage(codec);
        getContentManager().registerOntology(ontology);
           
        // Enable O2A communication   
        setEnabledO2ACommunication(true, 0);   
           
        // Update the list of seller agents every minute
        addBehaviour(new TickerBehaviour(this, 600) {   
            protected void onTick() {   
                // Update the list of seller agents   
                DFAgentDescription template = new DFAgentDescription();   
                ServiceDescription sd = new ServiceDescription();   
                sd.setType("Book-selling");   
                template.addServices(sd);   
                try {   
                    DFAgentDescription[] result = DFService.search(   
                            myAgent, template);   
                    sellerAgents.clear();   
                    for (int i = 0; i < result.length; ++i) {   
                        sellerAgents.addElement(result[i].getName());   
                    }   
                }   
                catch (FIPAException fe) {   
                    fe.printStackTrace();   
                }   
            }              
        });
        purchase("A_storm_of_swords", 10);
           
        // Printout a welcome message   
        System.out.println("Buyer-agent " + getAID().getName() + " is ready.");   
    }
    
    protected void takeDown() {  
        System.out.println("Buyer-agent " + getAID().getName() + " terminated.");   
    }
       
    /**  
    * This method is called by the GUI when the user inserts a new  
    * book to buy  
    * @param title The title of the book to buy  
    * @param maxPrice The maximum acceptable price to buy the book  
    * @param deadline The deadline by which to buy the book  
    */   
    public void purchase(String title, int price) {   
        addBehaviour(new PurchaseManager(this, title, price));   
    }   
       
    private class PurchaseManager extends TickerBehaviour{   
        private String title;   
        private int price;  
           
        public PurchaseManager(Agent agent, String title, int price){   
            super(agent, 6000);    // tick every minute   
            this.title = title;   
            this.price = price;  
        }   
           
        public void onTick(){   
            long currentTime = System.currentTimeMillis();  
            // Compute the currently acceptable price and start a negotiation  
            myAgent.addBehaviour(new BookNegotiator(title, price, this));  
            
        }   
    }   
       
    /**  
     * Inner class BookNegotiator.  
     * This is the behaviour used by Book-buyer agents to actually  
     * negotiate with seller agents the purchase of a book.  
     */   
    private class BookNegotiator extends ContractNetInitiator {   
        private String title;   
        private int price;   
        private PurchaseManager manager;   
           
        public BookNegotiator(String title, int price, PurchaseManager manager){   
            super(null, null);   
            this.title = title;   
            this.price = price;   
            this.manager = manager;   
        }   
           
        protected Vector prepareCfps(ACLMessage cfp) {   
            try {   
                ContentManager cm = myAgent.getContentManager();   
                   
                ContentElementList cel = new ContentElementList();   
                Book book = new Book();   
                book.setTitle(title);   
                book.setAuthors("");   
                Sell sellAction = new Sell();   
                sellAction.setItem(book);   
                cel.add(new Action(getAID(), sellAction));   
                   
                cfp = new ACLMessage(ACLMessage.CFP);   
                cfp.setLanguage(codec.getName());   
                cfp.setOntology(ontology.getName());   
                cfp.setProtocol(FIPANames.InteractionProtocol.FIPA_CONTRACT_NET);   
                cm.fillContent(cfp, cel);   
            }   
            catch (OntologyException oe) {   
                oe.printStackTrace();   
                cfp.setPerformative(ACLMessage.NOT_UNDERSTOOD);
                System.out.println();
                System.out.println("Call for proposal about Book " + title + " can't be understood.");
            }   
            catch (CodecException ce) {   
                ce.printStackTrace();   
                cfp.setPerformative(ACLMessage.NOT_UNDERSTOOD);   
                System.out.println("Call for proposal about Book " + title + " can't be understood.");   
            }   
               
            if (cfp.getPerformative() == ACLMessage.CFP) {   
                Vector v = new Vector();   
                for (int i = 0; i < sellerAgents.size(); ++i) {   
                    cfp.addReceiver((AID)sellerAgents.get(i));   
                }                  
                v.add(cfp);   
                return v;   
            }   
            else {   
                return null;   
            }              
        }   
           
        protected void handleAllResponses(Vector responses,   
                Vector acceptances) {   
            ACLMessage bestOffer = null;   
            float bestPrice = -1;   
               
            ContentManager cm = myAgent.getContentManager();   
            for (int i = 0; i < responses.size(); ++i) {   
                ACLMessage rsp = (ACLMessage) responses.get(i);   
                if (rsp.getPerformative() == ACLMessage.PROPOSE) {   
                    try {   
                        ContentElementList cel =   
                            (ContentElementList)cm.extractContent(rsp);   
                        Costs costs = (Costs)cel.get(1);   
                        float price = costs.getPrice();   
                        if (bestOffer == null || price < bestPrice) {   
                            bestOffer = rsp;   
                            bestPrice = price;   
                        }   
                    }   
                    catch (OntologyException oe) {   
                        oe.printStackTrace();   
                        System.out.println("Book " + title + " from " + rsp.getSender() + " can't be understood.");   
                    }   
                    catch (CodecException ce) {   
                        ce.printStackTrace();   
                        System.out.println("Book " + title + " from " + rsp.getSender() + " can't be understood.");
                    }                      
                }   
            }   
               
            if (bestOffer != null && bestPrice <= price) {   
                ACLMessage accept = bestOffer.createReply();   
                accept.setPerformative(ACLMessage.ACCEPT_PROPOSAL);   
                accept.setContent(bestOffer.getContent());   
                acceptances.add(accept);   
            }   
        }   
           
        protected void handleInform(ACLMessage inform) {   
            // Book successfully purchased   
            try {   
                ContentManager cm = myAgent.getContentManager();   
                ContentElementList cel =   
                    (ContentElementList)cm.extractContent(inform);   
                Costs costs = (Costs)cel.get(1);   
                float price = costs.getPrice();   
                System.out.println("Book " + title   
                        + " successfully purchased. Price = " + price);   
                manager.stop();   
            }   
            catch (OntologyException oe) {   
                oe.printStackTrace();   
                System.out.println("inform about Book "   
                        + title + " from " + inform.getSender()   
                        + " can't be understood.");   
            }   
            catch (CodecException ce) {   
                ce.printStackTrace();   
                System.out.println("inform about Book "   
                        + title + " from " + inform.getSender()   
                        + " can't be understood.");   
            }   
        }   
    } // End of inner class BookNegotiator   
       
    /*private class BookNegotiator extends Behaviour{  
        private String title;  
        private float maxPrice;  
        private PurchaseManager manager;  
          
        private AID bestSeller; // The seller agent who provides the best offer  
        private float bestPrice;    //The best offered price  
        private float repliesCnt = 0;   // The counter of replies from seller agents  
        private MessageTemplate mt; // The template to receive replies  
        private int step = 0;  
          
        public BookNegotiator(String t, float p, PurchaseManager m){  
            super(null);  
            title = t;  
            maxPrice = p;  
            manager = m;  
        }  
          
        public void action() {  
            switch (step) {  
            case 0:  
                // Send the cfp to all sellers  
                ACLMessage cfp = new ACLMessage(ACLMessage.CFP);  
                for (int i = 0; i < sellerAgents.size(); ++i) {  
                    cfp.addReceiver(sellerAgents.get(i));  
                }  
                cfp.setContent(title);  
                cfp.setConversationId("book-trade");  
                cfp.setReplyWith("cfp" + System.currentTimeMillis());   // Unique value  
                myAgent.send(cfp);  
                // Prepare the template to get proposals  
                mt = MessageTemplate.and(  
                        MessageTemplate.MatchConversationId("book-trade"),  
                        MessageTemplate.MatchInReplyTo(cfp.getReplyWith()));  
                step = 1;  
                break;  
            case 1:  
                // Receive all proposals/refusals from seller agents  
                ACLMessage reply = myAgent.receive(mt);  
                if (reply != null) {  
                    // Reply received  
                    if (reply.getPerformative() == ACLMessage.PROPOSE) {  
                        // This is an offer  
                        float price = Float.parseFloat(reply.getContent());  
                        if (bestSeller == null || price < bestPrice) {  
                            // This is the best offer at present  
                            bestPrice = price;  
                            bestSeller = reply.getSender();  
                        }  
                    }  
                    repliesCnt++;  
                    if (repliesCnt >= sellerAgents.size()) {  
                        // We received all replies  
                        step = 2;  
                    }  
                }  
                else {  
                    block();  
                }  
                break;  
            case 2:  
                if (bestSeller != null && bestPrice <= maxPrice) {  
                    // Send the purchase order to the seller that provided the best offer  
                    ACLMessage order = new ACLMessage(ACLMessage.ACCEPT_PROPOSAL);  
                    order.addReceiver(bestSeller);  
                    order.setContent(title);  
                    order.setConversationId("book-trade");  
                    order.setReplyWith("order" + System.currentTimeMillis());  
                    myAgent.send(order);  
                    // Prepare the template to get the purchase order reply  
                    mt = MessageTemplate.and(  
                            MessageTemplate.MatchConversationId("book-trade"),  
                            MessageTemplate.MatchInReplyTo(order.getReplyWith()));  
                    step = 3;  
                }  
                else {  
                    // If we received no acceptable proposals, terminate  
                    step = 4;  
                }  
                break;  
            case 3:  
                // Receive the purchase order reply  
                reply = myAgent.receive(mt);  
                if (reply != null) {  
                    // Purchase order reply received  
                    if (reply.getPerformative() == ACLMessage.INFORM) {  
                        // Purchase successful. We can terminate  
                        myGui.notifyUser("Book " + title  
                                + " successfully purchased."  
                                +   "price = " + bestPrice);  
                        manager.stop();  
                    }  
                    step = 4;  
                }  
                else {  
                    block();  
                }  
                break;  
            }  
        }  
              
        public boolean done() {  
            return step == 4;  
        }  
    } // End of inner class BookNegotiator  
*/     
}   
